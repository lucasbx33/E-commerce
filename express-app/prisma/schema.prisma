// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id         Int      @id @default(autoincrement())
  firstName  String?
  lastName   String?
  email      String   @unique
  password   String
  phone      String?
  createdAt  DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt
  orders     Order[]  // Relation avec les commandes
}

model article {
  id          Int       @id @default(autoincrement())
  name        String?   @unique
  description String?
  price       Decimal?
  stock       Int?
  Image       Image[]
  tags        ArticleTags[] // Relation avec la table pivot
  createdAt   DateTime? @default(now())
  updated_at  DateTime? @default(now()) @updatedAt
  orderLines  OrderLine[] // Relation avec les lignes de commande
}

model tags {
  id       Int       @id @default(autoincrement())
  name     String?       @unique
  articles ArticleTags[] // Relation avec la table pivot
}

model ArticleTags {
  id         Int      @id @default(autoincrement())
  articleId  Int
  tagId      Int
  article    article  @relation(fields: [articleId], references: [id])
  tag        tags     @relation(fields: [tagId], references: [id])

  @@unique([articleId, tagId]) // Garantit qu'un article ne peut pas avoir le même tag deux fois
}

model Image {
  id         String   @id @unique @default(cuid())
  id_article article? @relation(fields: [articleId], references: [id])
  main_image Boolean?
  link       String?
  articleId  Int
  createdAt  DateTime? @default(now())
  updated_at DateTime? @default(now()) @updatedAt
}

model Order {
  id          Int         @id @default(autoincrement())
  user        users       @relation(fields: [userId], references: [id])
  userId      Int         // Clé étrangère vers la table `users`
  orderLines  OrderLine[] // Relation avec les lignes de commande
  totalPrice  Decimal?    // Prix total de la commande
  status      String      // Statut de la commande (ex : "en cours", "livrée", etc.)
  createdAt   DateTime?   @default(now())
  updated_at  DateTime?   @default(now()) @updatedAt
}

model OrderLine {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int       // Clé étrangère vers la table `Order`
  article     article   @relation(fields: [articleId], references: [id])
  articleId   Int       // Clé étrangère vers la table `article`
  quantity    Int       // Quantité commandée
  unitPrice   Decimal   // Prix unitaire de l'article au moment de la commande
  lineTotal   Decimal   // Total de la ligne (unitPrice * quantity)
  createdAt   DateTime? @default(now())
  updated_at  DateTime? @default(now()) @updatedAt
}
